<?php

namespace Test\AbraFlexi\Bricks;

use \AbraFlexi\Bricks\Convertor;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-02-21 at 12:27:19.
 */
class ConvertorTest extends \Test\Ease\SandTest
{
    /**
     * @var Convertor
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() : void
    {
        $this->object = new Convertor();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() : void
    {
        
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::setSource
     */
    public function testSetSource()
    {
        $sourcer = new \AbraFlexi\FakturaVydana();
        $this->object->setSource($sourcer);
        $this->assertEquals($sourcer, $this->object->getInput());
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::setDestination
     */
    public function testSetDestination()
    {
        $dester = new \AbraFlexi\FakturaPrijata();
        $this->object->setDestination($dester);
        $this->assertEquals($dester, $this->object->getOutput());
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::conversion
     * @expectedException \Ease\Exception
     */
    public function testConversion()
    {
        $this->object->conversion();
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::prepareRules
     * @todo   Implement testPrepareRules().
     */
    public function testPrepareRules()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::convertDocument
     * @todo   Implement testConvertDocument().
     */
    public function testConvertDocument()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::convertSubitems
     * @todo   Implement testConvertSubitems().
     */
    public function testConvertSubitems()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::convertItems
     * @todo   Implement testConvertItems().
     */
    public function testConvertItems()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::removeRoColumns
     * @todo   Implement testRemoveRoColumns().
     */
    public function testRemoveRoColumns()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::commonItems
     * @todo   Implement testCommonItems().
     */
    public function testCommonItems()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::getInput
     */
    public function testGetInput()
    {
        $test = new \AbraFlexi\Adresar();
        $this->object->setSource($test);
        $this->assertEquals($test, $this->object->getInput());
    }

    /**
     * @covers AbraFlexi\Bricks\Convertor::getOutput
     */
    public function testGetOutput()
    {
        $test = new \AbraFlexi\Adresar();
        $this->object->setDestination($test);
        $this->assertEquals($test, $this->object->getOutput());
    }
}
